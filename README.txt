━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    GR Board REAMME File : GR 보드 필독문서
    
    ※ 이 문서는 GR Board 를 사용하기 전에 반드시 읽어보아야 하는 문서입니다.
    ※ 이 문서의 내용 중 라이센스부분은 반드시 지켜주셔야 하는 부분입니다.
    ※ 나머지 부분들은 '권장' 내지는 '정보' 입니다.
──────────────────────────────────────



▒ 라이센스 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

이 프로그램은 자유소프트웨어재단에서 관리하고 있는 GPL 2 혹은 최신의 GPL 을
따릅니다. 사용자는 소스코드를 볼 수 있으며, 수정할 수 있고, 배포할 수 있습니다.
또한 GR Board 에 여러분의 코드를 기여할 수 있습니다.

그러나 GR Board 의 저작권은 박희근에게 귀속되며, 이것은 여러분이 GR Board 를
수정하거나 수정 후 배포하더라도 변하지 않는 사실입니다. 또한 GR Board 에
사용된 코드들을 가져가서 사용 후 컴파일이나 기타 방법으로 소스코드를 숨겨서
판매하거나 배포할 수 없습니다. GR Board 의 일부 혹은 전체는 모두 제작자가
제시한 GPL 을 따르며 여러분이 수정한 GR Board 역시 GPL 을 자동적으로 따릅니다.

GPL 에서 규정한대로 GR Board 를 사용하면서 생기는 문제를 제작자의 책임으로
떠넘길 수 없으며, 제작자는 어떠한 책임을 질 수 없음을 명심해 주십시오.
GPL 에 관한 자세한 내용은 아래의 링크에서 확인하실 수 있습니다.

http://www.gnu.org/licenses/licenses.html



▒ 웹표준 배우기 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

GR 보드는 웹표준을 준수하기 위해 노력하고 있습니다.
허나 개발자의 무지와 관련자료의 부족으로 인해 100% 완벽하게 표준을 준수하기가
쉽지가 않습니다. 이는 GR 보드를 사용하시는 여러분들도 마찬가지일 것이라 여겨집니다.
때문에 웹표준에 대한 자료들이나 관련 토픽을 다루는 블로그 주소를 안내해 드리겠습니다.
아래의 주소들을 참고하셔서 여러분들의 웹표준 지식을 늘리시고, 또 여러분들의 지식을
다시 다른 분들과 함께 나누시길 바랍니다. :)

- 일모리님의 블로그 : http://ilmol.com
- 웹표준 제작 가이드: http://sirini.net/download/doc/good_document_for_web_standard_1.doc
(위 문서는 주소창이 입력 후 엔터치시면 보실 수 있거나 다운로드 하실 수 있습니다.)
- 모질라 웹표준 프로젝트 : http://www.mozilla.or.kr


웹표준 준수 기업 & 단체 참고사이트)

- Microsoft MSN Search : http://search.msn.com
- Microsoft MSN : http://www.msn.com
- REDHAT : http://www.redhat.com
- Ubuntu : http://ubuntu.com



▒ 코딩스타일 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

GR Board 는 PHP 와 MySQL 을 이용하는 웹게시판입니다.
PHP 의 특성상, 그리고 HTML 의 특성상 비교적 개성있는 코딩들에 대해서 관대한 편입니다.
제작자 역시 자칫 종교전쟁으로 비화될 수 있는 민감한 코딩스타일에 대해서는
전적으로 작성자의 취향을 존중합니다. 단, GR Board 에 한해서는 일관된 코딩기준이
필요하기 때문에 몇가지 원칙적인 기준들을 나열하고자 합니다.

---------
1. 인덴트
---------

인덴트는 탭으로만 하도록 합니다. 경우에 따라서, VI 상에서나 매우 작은 모니터의
콘솔화면에서 작업해야 할 경우 탭을 8글자로 해서 문단들을 더 명확하게 구분할 수 있습니다.
일반적으로 탭은 4글자로 정하지만, 탭은 작성자가 사용하는 에디터의 간단한 설정에
쉽게 바뀌므로 굳이 글자수를 제한하지는 않습니다.
(물론 여러분이 애플의 20 인치 시네마 디스플레이를 쓴다면 상관없을 수도 있겠네요. :)

인덴트를 사용할 때는 되도록 4~5레벨 이상의 인덴트가 필요치 않도록 해주시길 바랍니다.
인덴트가 5레벨 이상으로 가게되면 그 코드는 어쨌든 꼬였다고 볼 수 있습니다.
실제로 제작자가 작성한 코드에도 이런 문제점이 있으며, 이는 개선이 필요함을
의미합니다.

---------
2. 클래스
---------

클래스명은 모두 대문자로 작성하며, 하나의 파일에 하나의 클래스만 들어가야 합니다.
또한 COMMON 클래스를 제외한 나머지 클래스는 한 파트의 일을 처리하기 위한 함수들을
가지고 있어야 합니다.

클래스는 PHP4 와 PHP5 에서 모두 동작되어야 하며, 클래스는 함수들을 의미 있는
하나의 틀 안에 정리한다는 의미 이상을 가지지는 않습니다. 실제로, GR Board 의 클래스는
대부분 관련된 함수들을 명시적으로 묶는 역할만을 합니다.

-------
3. 함수
-------

함수는 theValueCheck(); 와 같이 명명하며, 한가지 일을 신뢰성있게 해야 합니다.
또한 함수를 정의하는 페이지가 2페이지 이상 가서는 안됩니다. 만약 그런 함수가 단지
안에서 case by case 와 같은 조건만 많이 처리하는 것이라면 상관없습니다.

또한 자주 사용하지 않는 함수이거나 활용이 특정 페이지에서 한번정도로 국한된다면
굳이 함수로 만들 필요가 없습니다. 재사용성이 떨어지는 함수를 굳이 매 실행마다
정의해야 할 필요가 없습니다.

또 함수에 전달하는 인자에서 필수 인자와 선택적인 인자가 있을 경우 항상
선택적인 인자를 오른쪽에 두고, 가장 잘 쓰이지 않는 선택적인 인자를 최우측으로
밀어내시길 바랍니다.

마지막으로 함수를 만들 때는 반드시 PHP 기본 함수가 이미 있는지 확인하여 사용하고,
특정함수 한두개를 단지 감싸는 형태라면 함수로 따로 만들지 말고 그 때 그 때 쓰시길
바랍니다.

-------
4. 변수
-------

함수와 마찬가지로 $theValueOne 과 같이 명명하며, 되도록 적당한 길이로 명명합니다.
암묵적으로, whlie 문과 for 문 같은 반복문 내에서 단지 카운터 역할을 하는 변수는
i 나 a 등으로도 적당합니다.

변수는 $_GET 이나 $_POST 에서 오는 것을 구분해서 받으며, 되도록이면 실제로 사용하는
변수만 페이지 상단에서 처리하도록 합니다. 또한 반드시, 함부로 변수들을 전역화시키지
않으며 쿠키와 GET 에서 오는 변수는 되도록 신뢰하지 않도록 합니다.

-------
5. 괄호
-------

제작자는 아래의 방식을 선호합니다.

function foo()
{
	if($someValue > 50)
	{
		echo "Good work, foo!";
	}
}

즉 함수 뿐만이 아니라 if - else 문 역시 한줄 내려서 시작하도록 합니다. 단, 예외로는
if - else 이 한줄로 끝나거나, HTML 내부에서 처리되어야 하거나 할 경우 괄호를 사용하지
않거나 사용하더라도 if 문 끝에 붙여서 쓸 수 있습니다. 단, 닫는 괄호는 가급적
그 괄호가 그 줄에서 처음이자 마지막이어야 합니다.

---------
6. 코멘트
---------

코멘트는 적절한 곳에 간단명료하게 작성되어야 합니다.
클래스 상단에는 항상 여러줄에 걸쳐서 코멘트를 작성하는 것이 좋습니다.
클래스를 만든 사람, 이 클래스가 포함하고 있는 것들, 개선여지 등등...

함수를 정의하기 전에는 항상 코멘트를 적어주는 게 좋습니다.
그러나 그 함수가 어떻게 동작하는지 시시콜콜하게 작성될 필요는 없습니다.
'무엇을' 하는지만 적어두면 됩니다. 제작자가 만든 함수 뿐만 아니라, 여러분이 만든 함수는
더 좋은, 개선된 함수가 만들어지면 언제든지 '어떻게 동작하는지'가 바뀔 수 있음을
명심하시길 바랍니다.

임시로 변경한 부분이 있을 경우에는 반드시 코멘트를 달고 자신의 이름이나 닉네임을
변경한 날짜와 함께 변경이유를 기록합니다. 또 개선여지가 있는 부분에서도 마찬가지로
코멘트를 답니다.

-------
7. 배열
-------

숫자 인덱스로된 배열이 아닌, 리터럴 배열 인덱스 주위에는 홑옴표(') 나 따옴표(") 로
둘러싸여 있어야 합니다. 예를 들어,

잘못된 예) $foo[bar]
잘  된 예) $foo["bar"] 혹은 $foo['bar']

위와 같이 하는 이유는 PHP 파서에서 $foo[bar] 를 처리할 때 bar 를 상수로 보기 때문입니다.
물론 NOTICE 에러만 발생하고 의도한대로 동작하는 이유는 파서에서 bar 를 자동적으로 'bar' 로
변경하기 때문입니다. 즉, 파서는 $foo[bar] 와 같은 변수를 처리하기 위해 별도의 시간을 소비하게
됩니다. 따라서 리터럴 배열 인덱스는 되도록 $foo['bar'] 와 같은 형태로 사용하셔야 합니다.

현재 코드상에 일부분이 여전히 $foo[bar] 와 같은 형태로 되어 있습니다. 이는 모두 개선이
필요합니다. 또한 일부 테마에서 DB 에 조회한 값을 배열로 담을 때 $foo[bar] 와 같은 형태로
담을 수 있습니다. 이 역시 개선이 필요한 부분입니다.

※ 주의 : $foo[$bar] 를 $foo['$bar'] 로 하셔서는 안됩니다.

------------
8. HTML 태그
------------

HTML 태그는 xHTML 을 기준으로 작성합니다. 또한 대부분의 태그들은 style 로, style 은 다시
CSS 클래스를 정의해서 사용할 수 있습니다. 모든 태그들은 소문자로만 작성합니다.

허용하지만 추천하지 않음) <td bgcolor="#000000" height="30" width="50">
허용하고 위에것보다 추천) <td style="background-color:#000000;height:30px;width:50px;">
허용하고 무엇보다도 추천) <td class="leftTable">

위의 3가지 예중 마지막 예는 스타일시트에서 leftTable 이 정의되어 있어야 합니다.

.leftTable { background-color:#000000; height:30px; width:50px; }

위와 같이 정의하고 필요할 때마다 class 를 사용하는 방식을 제일 추천합니다.
한번 정의한 스타일을 계속 재사용 할 수 있습니다.

-------
0. 기타
-------

- DB Table 은 소문자와 언더바(_)를 만을 활용하여 명명했습니다.
- 한 파일이 500 줄 이상 넘어가지 않도록 include 와 require 를 적절히 사용했습니다.
- include_once 보다는 include 를 사용했습니다. 
  매번 실행시 인클루드 여부를 검사하도록 하는 것은 GR Board 같은 작은 프로그램에는 맞지 않습니다.
- switch 분기문 보다는 if - else 를 사용했고, 지나친 if - else 의 연속은 피했습니다.
  switch 는 제작자가 좋아하는 파이썬 언어에서 지원되지 않기에 잘 쓰이지 않았던 것 뿐입니다.
- 그 밖에 명시적으로 제시하지 않은 코딩스타일은 기존의 스타일을 따릅니다.